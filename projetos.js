function inicializarProjetos() {
  const itens = document.querySelectorAll('.lista-projetos li');
  const titulo = document.getElementById('titulo');
  const descricao = document.getElementById('descricao');
  const imagem = document.getElementById('imagem');

  const projetos = [
    {
      titulo: 'Projeto Rater',
      imagem: './img/rater.jpg',
      descricao: `
        <p>Este projeto √© um site de streaming de filmes desenvolvido utilizando as mais modernas tecnologias front-end para proporcionar uma experi√™ncia de usu√°rio rica e din√¢mica. O projeto √© constru√≠do com React e TypeScript, o que garante uma aplica√ß√£o escal√°vel e com tipagem segura. A gest√£o do estado global √© feita com Zustand, permitindo um gerenciamento de dados eficiente e reativo. Para a estiliza√ß√£o dos componentes, s√£o utilizados styled-components, que oferecem um sistema de estilos modular e reutiliz√°vel, mantendo o c√≥digo CSS organizado e espec√≠fico para cada componente.</p>

      <h3>Funcionalidades Principais:</h3>
      <ol>
        <li>
          <strong>Exibi√ß√£o de Filmes:</strong>
          <ul>
            <li>O site exibe uma variedade de filmes organizados em diferentes categorias, como lan√ßamentos, recomendados e assistidos.</li>
            <li>O layout inclui componentes como SelectionContainer, que destaca filmes em uma se√ß√£o principal, e Lancamento, que mostra os √∫ltimos lan√ßamentos em um carrossel interativo.</li>
          </ul>
        </li>

        <li>
          <strong>Banners Din√¢micos:</strong>
          <ul>
            <li>Banners grandes e pequenos s√£o usados para destacar filmes espec√≠ficos. Esses banners incluem t√≠tulos, descri√ß√µes, avalia√ß√µes, e bot√µes para assistir ao trailer ou ao filme.</li>
            <li>A exibi√ß√£o dos banners √© responsiva e adaptada tanto para desktop quanto para dispositivos m√≥veis.</li>
          </ul>
        </li>

        <li>
          <strong>API Integration:</strong>
          <ul>
            <li>O projeto consome dados de uma API p√∫blica de filmes (como o IMDB) para exibir tend√™ncias da semana, detalhes de filmes, e outras informa√ß√µes relevantes.</li>
            <li>A aplica√ß√£o utiliza paths espec√≠ficos, como /trending/all/week, para buscar os filmes mais populares em determinado per√≠odo.</li>
          </ul>
        </li>
      </ol>
    `
    },
     {
  titulo: 'Projeto Plataforma de Streaming ',
  descricao: `
    <p>Projeto desenvolvido com <strong>HTML</strong>, <strong>CSS</strong> e integra√ß√£o com uma API p√∫blica de filmes, simulando uma plataforma de streaming inspirada na Netflix.</p>

    <h4>Menu Lateral Fixo:</h4>
    <p>Menu fixo √† esquerda com categorias como EM ALTA, ORIGINAIS, NETFLIX, POPULARES, COM√âDIAS, ROMANCES e DOCUMENT√ÅRIOS. Navega√ß√£o visual, sem troca real de conte√∫do.</p>

    <h4>API de Filmes:</h4>
    <p>Busca din√¢mica de filmes via API, exibindo imagens e sinopses curtas para facilitar a escolha dos usu√°rios.</p>

    <h4>Design e Responsividade:</h4>
    <p>Layout centralizado com fundo preto e √°rea de filmes transparente. Interface responsiva que se adapta a diferentes dispositivos, mantendo a legibilidade.</p>

    <h4>Funcionalidade:</h4>
    <p>Exibi√ß√£o simples de filmes e sinopses, sem intera√ß√µes avan√ßadas como trailers ou links externos.</p>
  `,
  imagem: 'imagens/streaming.jpg' // ajuste conforme necessidade
}

,
    {
      titulo: 'Fastfood',
  imagem: 'imagens/fastfood.jpg',
  descricao: `
    <p>Este projeto √© uma simula√ß√£o de um site de fast food onde os usu√°rios podem escolher entre dois restaurantes (McDonald's e Burger King), explorar categorias de produtos e fazer pedidos. O sistema calcula o total dos pedidos conforme a quantidade de cada item √© ajustada.</p>
    <h3>Tecnologias Utilizadas:</h3>
    <ul>
      <li><strong>HTML5:</strong> Estrutura da p√°gina.</li>
      <li><strong>CSS3:</strong> Estiliza√ß√£o e layout.</li>
      <li><strong>JavaScript:</strong> Funcionalidade interativa e manipula√ß√£o do DOM.</li>
      <li><strong>JSON:</strong> Estrutura de dados dos itens do menu.</li>
    </ul>
  `
    },
   {
  titulo: 'Projeto Cat√°logo de Filmes com API e PHP',
  imagem: 'imagens/catalago-filmes.jpg', // ajuste o caminho da imagem conforme seu projeto
  descricao: `
    <p>‚ú® Projeto de Cat√°logo de Filmes com API e PHP ‚ú®</p>
    <h3>üîé O que foi solicitado:</h3>
    <ul>
      <li>Desenvolver uma aplica√ß√£o web que consumisse uma API para listar filmes e apresentasse detalhes individuais.</li>
      <li>Um cat√°logo com imagens dos filmes.</li>
      <li>Um sistema para exibir informa√ß√µes detalhadas ao clicar em um filme.</li>
      <li>Responsividade para diferentes dispositivos.</li>
    </ul>
    <h3>üí° O que eu fiz e como fiz:</h3>
    <ul>
      <li>Desenvolvimento Back-End: Implementei um controlador em PHP para consumir dados da API e process√°-los no servidor.</li>
      <li>Front-End Responsivo: Utilizei HTML, CSS e JavaScript para criar uma interface intuitiva e adapt√°vel a dispositivos m√≥veis.</li>
      <li>Funcionalidade de Detalhes: Configurei links nas imagens do cat√°logo que levam a uma p√°gina detalhada utilizando par√¢metros de URL.</li>
      <li>Melhorias: Adicionei uma camada de escurecimento ao banner, estilizei os t√≠tulos para melhor visibilidade e utilizei placeholders para filmes sem imagens.</li>
      <li>Infraestrutura: Organizei o projeto em uma estrutura modular, com pastas para controladores, modelos, vis√µes e assets.</li>
      <li>Testes Locais: Configurei o projeto para rodar no servidor local com suporte a responsividade e testei em diferentes tamanhos de tela.</li>
    </ul>
   
  `
},

   {
  titulo: 'Marketplace de NFTs',
  imagem: 'imagens/marketplace-nfts.jpg', // ajuste conforme seu projeto
  descricao: `
    <p>üé¨üöÄ Apresentando meu mais recente projeto: Um marketplace de NFTs!</p>
    <p>Acabei de finalizar um projeto desafiador e muito empolgante: um marketplace de NFTs desenvolvido com tecnologias modernas e boas pr√°ticas de desenvolvimento.</p>
    <h3>‚úÖ Sobre o projeto:</h3>
    <p>A aplica√ß√£o permite a exibi√ß√£o de produtos (NFTs) com detalhes completos, al√©m de um sistema de carrinho de compras onde o usu√°rio pode adicionar, visualizar e remover itens. Todo o estado do carrinho √© gerenciado de forma eficiente com Redux.</p>
    <h3>üíª Tecnologias utilizadas:</h3>
    <ul>
      <li><strong>#NextJS</strong> ‚Äì Framework moderno para React, com suporte a Server Side Rendering (SSR) e Static Site Generation (SSG).</li>
      <li><strong>#React</strong> ‚Äì Biblioteca JavaScript para constru√ß√£o de interfaces reativas e perform√°ticas.</li>
      <li><strong>#TypeScript</strong> ‚Äì Garantindo tipagem est√°tica e maior seguran√ßa no c√≥digo.</li>
      <li><strong>#Redux</strong> ‚Äì Gerenciamento centralizado do estado, utilizado no controle do carrinho de compras.</li>
      <li><strong>#Docker</strong> ‚Äì Containeriza√ß√£o da aplica√ß√£o para um ambiente de desenvolvimento e produ√ß√£o mais eficiente.</li>
      <li><strong>#CSSModules</strong> ‚Äì Estiliza√ß√£o modular e isolada para maior organiza√ß√£o do c√≥digo.</li>
    </ul>
   
  `
}
,
    {
  titulo: 'Projeto Full Stack com Angular 17 + ASP.NET Core',
  imagem: 'imagens/fullstack.jpg', // ajuste conforme necess√°rio
  descricao: `
    <p>üöÄ Desafio t√©cnico integrando front-end em Angular 17 com uma API mockada em ASP.NET Core! üíª</p>
    <p>O objetivo foi desenvolver uma aplica√ß√£o simples, mas funcional, que consome uma API simulada para exibir uma lista de pessoas em uma tabela paginada. O projeto inclui:</p>
    <ul>
      <li>‚úÖ API criada com ASP.NET Core gerando 30 registros de pessoas com dados mockados (usando a biblioteca Bogus)</li>
      <li>‚úÖ Tabela com pagina√ß√£o, filtro por nome e carregamento via bot√£o</li>
      <li>‚úÖ UI constru√≠da com Angular Material</li>
      <li>‚úÖ Separa√ß√£o clara entre front-end e back-end</li>
      <li>‚úÖ Projeto funcionando localmente, sem necessidade de banco de dados</li>
    </ul>
    
  `
}
  ];

  itens.forEach((item, index) => {
    item.addEventListener('click', () => {
      // Atualiza conte√∫do com HTML na descri√ß√£o
      titulo.textContent = projetos[index].titulo;
      descricao.innerHTML = projetos[index].descricao;
      imagem.src = projetos[index].imagem;
      imagem.alt = projetos[index].titulo;

      // Ajusta item ativo visualmente
      itens.forEach(li => li.classList.remove('ativo'));
      item.classList.add('ativo');
    });
  });
}
